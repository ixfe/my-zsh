{
  "function": {
    "prefix": "function",
    "body": [
      "function ${1:name}(${2:args}:string) {",
      "$2"
    ],
    "description": "function 函数"
  },
  "arrowFunction": {
    "prefix": "arrowFunction",
    "body": [
      "const ${1:name} = (${2:args}:string) {",
      "$2"
    ],
    "description": "arrowFunction 函数"
  },
  "import": {
    "prefix": "import",
    "body": [
      "import ${1:name} from '${2:path}';"
    ],
    "description": "import 导入"
  },
  "require": {
    "prefix": "require",
    "body": [
      "const ${1:name} = require('${2:path}');"
    ],
    "description": "require 导入"
  },
  "type": {
    "prefix": "type",
    "body": [
      "type ${1:name} = {",
      "${2:_name}: string",
      "}"
    ],
    "description": "type 类型"
  },
  "interface": {
    "prefix": "interface",
    "body": [
      "interface ${1:name}  {",
      "${2:_name}: string",
      "}"
    ],
    "description": "interface 类型"
  },
  "useAttrs": {
    "prefix": "useAttrs",
    "body": [
      "const attrs = useAttrs()"
    ],
    "description": "useAttrs"
  },
  "defineProps": {
    "prefix": "defineProps",
    "body": [
      "const props = defineProps<{name:any}>()"
    ],
    "description": "defineProps"
  },
  "ref": {
    "prefix": "ref",
    "body": [
      "const {$1} = ref(${2})"
    ],
    "description": "ref"
  },
  "reactive": {
    "prefix": "reactive",
    "body": [
      "const {$1} = reactive<${1:any}>(${2})"
    ],
    "description": "reactive"
  },
  "useToggle": {
    "prefix": "useToggle",
    "body": [
      "const toggle = useToggle(mode)"
    ],
    "description": "useToggle"
  },
  "useElementBounding": {
    "prefix": "useElementBounding",
    "body": [
      "const rect = useElementBounding(el)"
    ],
    "description": "useElementBounding"
  },
  "watch": {
    "prefix": "watch",
    "body": [
      "watch(${1:ref}, (value) => {",
      "${2}",
      "})"
    ],
    "description": "useElementBounding"
  },
  "log": {
    "prefix": "log 打印",
    "body": [
      "console.log('$1');",
      "$2"
    ],
    "description": "Log output to console"
  },
  "computed": {
    "prefix": "computed",
    "body": [
      "const result = computed(() => {",
      "${1}",
      "})"
    ],
    "description": "computed"
  },
  "useEventListener": {
    "prefix": "useEventListener",
    "body": "useEventListener('resize', update)",
    "description": "useEventListener"
  },
  "watchEffect": {
    "prefix": "watchEffect",
    "body": [
      "watchEffect(() => {",
      "${1}",
      "})"
    ],
    "description": "watchEffect"
  },
  "useStorage": {
    "prefix": "useStorage",
    "body": [
      "useStorage('${1:key}', ${2:defaultValue})"
    ],
    "description": "useStorage"
  }
}
